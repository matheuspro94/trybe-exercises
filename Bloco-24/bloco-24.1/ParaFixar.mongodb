use ("agg_example");
db.transactions.insertMany([
  { value: 5900, from: "Dave America", to: "Ned Flanders", bank: 'International' },
  { value: 1000, from: "Mark Zuck", to: "Edna Krabappel", bank: 'FloridaBank' },
  { value: 209, from: "Lisa Simpson", to: "Dave America", bank: 'bankOfAmerica' },
  { value: 10800, from: "Arnold Schuz", to: "Mark Zuck", bank: 'JPMorgan' },
  { value: 850, from: "Barney Gumble", to: "Lisa Simpson", bank: 'Citigroup' },
  { value: 76000, from: "Ned Flanders", to: "Edna Krabappel", bank: 'JPMorgan' },
  { value: 1280, from: "Dave America", to: "Homer Simpson", bank: 'Citigroup' },
  { value: 7000, from: "Arnold Schuz", to: "Ned Flanders", bank: 'International' },
  { value: 59020, from: "Homer Simpson", to: "Lisa Simpson", bank: 'International' },
  { value: 100, from: "Mark Zuck", to: "Barney Gumble", bank: 'FloridaBank' },
]);

// Selecione todas as transações feitas pelo 
// cliente chamado "Dave America".

// Selecione todas as transações com o valor 
// entre 700 e 6000, ou que sejam recebidas 
// pela cliente "Lisa Simpson".

// Selecione três transações com o valor 
// acima de 1000.

use ("agg_example");
db.transactions.aggregate(
  [{
    $match: {
      from: "Dave America",
    }
  }]
);

use ("agg_example");
db.transactions.aggregate(
  [
    {
      $match: {
        $or: [
          { value: { $gte:700, $lte:6000 } },
          { to: "Lisa Simpson" },
        ]
     }
    },
    {
      $sort: {
        value: -1,
      }
    }
  ]
);

use ("agg_example");
db.transactions.aggregate(
  [
    { $match: { value: { $gte: 1000 } } },
    { $limit: 3 },
    { $sort: { value: -1 } },
  ]
);

use ("agg_example");
db.transactions.aggregate(
  [
    { $project: {
      _id: 0,
      bank: 1,
      value: 1,
    } }
  ]
);

// Para fixar $group

use ("agg_example");
db.transactions.aggregate(
  [
    {
      $group: {
        _id: "$bank",
        count: { $sum: 1 }
        }
    }
  ]
);

use ("agg_example");
db.transactions.aggregate(
  [
    {
      $group: {
        _id: "$bank",
        totalValue: { $sum: "$value" },
        transações: { $sum: 1 } 
      }
    },
    {
      $sort: { transações: -1 }
    }
  ]
);

use ("agg_example");
db.transactions.aggregate(
  [
    {
      $group: {
        _id: "$bank",
        TotalTransações: { $sum: "$value" },
      }
    },
  ]
);

use ("agg_example");
db.transactions.aggregate(
  [
    {
      $group: {
        _id: "$bank",
        TotalTransações: { $sum: "$value" },
      }
    },
    {
      $match: {
        TotalTransações: { $gte: 1000 },
      }
    }
  ]
);

// Para fixar $lookup

use("agg_example");
db.clients.insertMany([
  { name: "Dave America", State: "Florida" },
  { name: "Ned Flanders", State: "Alasca" },
  { name: "Mark Zuck", State: "Texas" },
  { name: "Edna Krabappel", State: "Montana" },
  { name: "Arnold Schuz", State: "California" },
  { name: "Lisa Simpson", State: "Florida" },
  { name: "Barney Gumble", State: "Texas" },
  { name: "Homer Simpson", State: "Florida" },
]);

// Selecione todos os clientes com as 
// suas respectivas transações feitas;

use("agg_example");
db.clients.aggregate([
    {
      $lookup: {
        from: "transactions",
        localField: "name",
        foreignField: "from",
        as: "transactions_history"
      }
    }
]);

// Selecione quatro clientes com as suas 
// respectivas transações recebidas;

use("agg_example");
db.clients.aggregate([
  {
    $lookup: {
      from: 'transactions',
      localField: 'name',
      foreignField: 'to',
      as: 'transactions_history',
    },
  },
  {
    $limit: 4,
  }
]);

// Selecione todos os cliente do estado da 
// "Florida" e suas respectivas transações 
// recebidas.

use("agg_example");
db.clients.aggregate([
  {
    $match: { State: 'Florida'}
  },
  {
    $lookup: {
      from: 'transactions',
      localField: 'name',
      foreignField: 'to',
      as: 'transactions_history'
    }
  }
]);